import { type State, type Scorecard } from "../data";
import { type Results, type ResultCategory, getResults } from "../results";

// Generates an enormous Excel row that encodes the full state, for use in other tools.
export function encode(state: State): [string, any][] {
  let results = getResults(state);
  let isStreet = state.summary.checkType == "street";
  let isPath = state.summary.checkType == "path";

  let losCodes = {
    Safety: "Sa",
    Accessibility: "Ac",
    Comfort: "Cf",
    Directness: "Di",
    Attractiveness: "At",
    Cohesion: "Co",
    overall: "To",
  };
  let placemakingCodes = {
    "Social activity": "SA",
    "Personal security": "PS",
    "Character and legibility": "CL",
    Environment: "En",
    overall: "To",
  };

  return [
    ...schemeSummary(state),
    ...policyCheck(state),
    ...scorecardMetrics("SA", 0, state.safetyCheck),
    ...scorecardMetrics("ST", 16, state.streetCheck),
    ...scorecardMetrics("SP", 0, state.streetPlacemakingCheck),
    ...scorecardMetrics("PA", 16, state.pathCheck),
    ...scorecardMetrics("PP", 16, state.pathPlacemakingCheck),
    ...policyCheckSummary(state),
    ...safetyCheckSummary(state),

    // TODO If it's neither path or street, levelOfService will be empty
    ...categoryBreakdowns(
      "ST-LOS",
      [...results.levelOfService, results.overall],
      isStreet,
      losCodes,
    ),
    ...categoryBreakdowns("ST-LOS", results.byMode, isStreet, {
      // TODO Remember to rename when changing these
      walking: "Wa",
      wheeling: "Wh",
      cycling: "Cy",
    }),
    ...categoryBreakdowns(
      "SP-LOS",
      [...results.placemakingCategories, results.placemakingOverall],
      isStreet,
      placemakingCodes,
    ),

    ...categoryBreakdowns(
      "PA-LOS",
      [...results.levelOfService, results.overall],
      isPath,
      losCodes,
    ),
    ...categoryBreakdowns("PA-LOS", results.byMode, isPath, {
      // TODO Remember to rename when changing these
      walking: "Wa",
      wheeling: "Wh",
      cycling: "Cy",
      horse: "HR",
    }),
    ...categoryBreakdowns(
      "PP-LOS",
      [...results.placemakingCategories, results.placemakingOverall],
      isPath,
      placemakingCodes,
    ),
  ];
}

function schemeSummary(state: State): [string, any][] {
  let x = state.summary;
  return [
    ["Scheme Ref", x.schemeReference],
    ["Date of Design Review", x.dateDesignReview],
    ["Scheme Name", x.schemeName],
    ["Authority", x.authority],
    ["Transport/ Combined Authority", x.transportOrCombinedAuthority],
    ["Region", x.region],
    ["Funding Programme", x.fundingProgramme],
    ["Design Stage", x.designStage],
    ["Funding Conditions", x.fundingConditions],
    ["Inspector", x.inspectorEmail],
    ["RouteLength", x.totalRouteLengthKm],
    ["RouteFileLength", x.assessedRouteLengthKm],
    ["Notes", x.notes],
    ["Tool", "Route Check online-alpha"],
    // Don't worry about the blank case; the output of this log wouldn't matter anyway
    ["Sub-tool", x.checkType == "street" ? "Street Check" : "Path Check"],
  ];
}

function policyCheck(state: State): [string, any][] {
  let out: [string, any][] = [];
  for (let [i, x] of state.policyCheck.entries()) {
    out.push([`PC${num(i)}-E`, x.existing]);
    out.push([`PC${num(i)}-D`, x.proposed]);
  }
  return out;
}

function scorecardMetrics(
  prefix: string,
  offset: number,
  scorecard: Scorecard,
): [string, any][] {
  let out: [string, any][] = [];
  for (let i = 0; i < scorecard.existingScores.length; i++) {
    out.push([`${prefix}${num(i + offset)}-E`, scorecard.existingScores[i]]);
    out.push([`${prefix}${num(i + offset)}-D`, scorecard.proposedScores[i]]);
  }
  return out;
}

function num(idx: number): string {
  return (idx + 1).toString().padStart(2, "0");
}

function policyCheckSummary(state: State): [string, any][] {
  // TODO Some duplication with results_analysis, but not worth folding into Results yet
  let policyConflicts = {
    existing: state.policyConflictLog.filter((x) => x.stage == "Existing")
      .length,
    designed: state.policyConflictLog.filter((x) => x.stage == "Design").length,
    removed: state.policyConflictLog.filter((x) => x.resolved == "Yes").length,
  };
  return [
    ["PC-E", policyConflicts.existing],
    ["PC-D", policyConflicts.designed],
    ["PC-Rem", policyConflicts.removed],
    ["PC-Int", policyConflicts.designed],
    [
      "PC-Tot",
      policyConflicts.designed +
        policyConflicts.existing -
        policyConflicts.removed,
    ],
  ];
}

function safetyCheckSummary(state: State): [string, any][] {
  let criticalIssues = {
    existing: state.criticalIssues.filter((x) => x.stage == "Existing").length,
    designed: state.criticalIssues.filter((x) => x.stage == "Design").length,
    removed: state.criticalIssues.filter((x) => x.resolved == "Yes").length,
  };
  return [
    ["SA-E", criticalIssues.existing],
    ["SA-D", criticalIssues.designed],
    ["SA-Rem", criticalIssues.removed],
    ["SA-Int", criticalIssues.designed],
    [
      "SA-Tot",
      criticalIssues.designed +
        criticalIssues.existing -
        criticalIssues.removed,
    ],
  ];
}

function categoryBreakdowns(
  prefix: string,
  categories: ResultCategory[],
  blankAnswers: boolean,
  categoryCodes: { [category: string]: string },
): [string, any][] {
  let out: [string, any][] = [];
  for (let result of categories) {
    let code = categoryCodes[result.category];
    // TODO Double check if the % should be there
    out.push([
      `${prefix}-${code}-E`,
      blankAnswers ? "" : `${Math.round(result.existing.scorePercent)}%`,
    ]);
    out.push([
      `${prefix}-${code}-D`,
      blankAnswers ? "" : `${Math.round(result.proposed.scorePercent)}%`,
    ]);
  }
  return out;
}

/*
[
["J1-LOS-WW-E", ],
["J1-LOS-WW-D", ],
["J1-LOS-Cy-E", ],
["J1-LOS-Cy-D", ],
["J1-LOS-To-E", ],
["J1-LOS-To-D", ],
["J2-LOS-WW-E", ],
["J2-LOS-WW-D", ],
["J2-LOS-Cy-E", ],
["J2-LOS-Cy-D", ],
["J2-LOS-To-E", ],
["J2-LOS-To-D", ],
["J3-LOS-WW-E", ],
["J3-LOS-WW-D", ],
["J3-LOS-Cy-E", ],
["J3-LOS-Cy-D", ],
["J3-LOS-To-E", ],
["J3-LOS-To-D", ],
["J4-LOS-WW-E", ],
["J4-LOS-WW-D", ],
["J4-LOS-Cy-E", ],
["J4-LOS-Cy-D", ],
["J4-LOS-To-E", ],
["J4-LOS-To-D", ],
["J5-LOS-WW-E", ],
["J5-LOS-WW-D", ],
["J5-LOS-Cy-E", ],
["J5-LOS-Cy-D", ],
["J5-LOS-To-E", ],
["J5-LOS-To-D", ],
["J6-LOS-WW-E", ],
["J6-LOS-WW-D", ],
["J6-LOS-Cy-E", ],
["J6-LOS-Cy-D", ],
["J6-LOS-To-E", ],
["J6-LOS-To-D", ],
["J7-LOS-WW-E", ],
["J7-LOS-WW-D", ],
["J7-LOS-Cy-E", ],
["J7-LOS-Cy-D", ],
["J7-LOS-To-E", ],
["J7-LOS-To-D", ],
["J8-LOS-WW-E", ],
["J8-LOS-WW-D", ],
["J8-LOS-Cy-E", ],
["J8-LOS-Cy-D", ],
["J8-LOS-To-E", ],
["J8-LOS-To-D", ],
["J9-LOS-WW-E", ],
["J9-LOS-WW-D", ],
["J9-LOS-Cy-E", ],
["J9-LOS-Cy-D", ],
["J9-LOS-To-E", ],
["J9-LOS-To-D", ],
["J10-LOS-WW-E", ],
["J10-LOS-WW-D", ],
["J10-LOS-Cy-E", ],
["J10-LOS-Cy-D", ],
["J10-LOS-To-E", ],
["J10-LOS-To-D", ],
["J11-LOS-WW-E", ],
["J11-LOS-WW-D", ],
["J11-LOS-Cy-E", ],
["J11-LOS-Cy-D", ],
["J11-LOS-To-E", ],
["J11-LOS-To-D", ],
["J12-LOS-WW-E", ],
["J12-LOS-WW-D", ],
["J12-LOS-Cy-E", ],
["J12-LOS-Cy-D", ],
["J12-LOS-To-E", ],
["J12-LOS-To-D", ],
["J1-Arms", ],
["J2-Arms", ],
["J3-Arms", ],
["J4-Arms", ],
["J5-Arms", ],
["J6-Arms", ],
["J7-Arms", ],
["J8-Arms", ],
["J9-Arms", ],
["J10-Arms", ],
["J11-Arms", ],
["J12-Arms", ],
["01PCRef", ],
["01PCTyp", ],
["01PCSta", ],
["01PCLaL", ],
["01PCLoc", ],
["01PCRes", ],
["01PCCom", ],
["02PCRef", ],
["02PCTyp", ],
["02PCSta", ],
["02PCLaL", ],
["02PCLoc", ],
["02PCRes", ],
["02PCCom", ],
["03PCRef", ],
["03PCTyp", ],
["03PCSta", ],
["03PCLaL", ],
["03PCLoc", ],
["03PCRes", ],
["03PCCom", ],
["04PCRef", ],
["04PCTyp", ],
["04PCSta", ],
["04PCLaL", ],
["04PCLoc", ],
["04PCRes", ],
["04PCCom", ],
["05PCRef", ],
["05PCTyp", ],
["05PCSta", ],
["05PCLaL", ],
["05PCLoc", ],
["05PCRes", ],
["05PCCom", ],
["06PCRef", ],
["06PCTyp", ],
["06PCSta", ],
["06PCLaL", ],
["06PCLoc", ],
["06PCRes", ],
["06PCCom", ],
["07PCRef", ],
["07PCTyp", ],
["07PCSta", ],
["07PCLaL", ],
["07PCLoc", ],
["07PCRes", ],
["07PCCom", ],
["08PCRef", ],
["08PCTyp", ],
["08PCSta", ],
["08PCLaL", ],
["08PCLoc", ],
["08PCRes", ],
["08PCCom", ],
["09PCRef", ],
["09PCTyp", ],
["09PCSta", ],
["09PCLaL", ],
["09PCLoc", ],
["09PCRes", ],
["09PCCom", ],
["10PCRef", ],
["10PCTyp", ],
["10PCSta", ],
["10PCLaL", ],
["10PCLoc", ],
["10PCRes", ],
["10PCCom", ],
["11PCRef", ],
["11PCTyp", ],
["11PCSta", ],
["11PCLaL", ],
["11PCLoc", ],
["11PCRes", ],
["11PCCom", ],
["12PCRef", ],
["12PCTyp", ],
["12PCSta", ],
["12PCLaL", ],
["12PCLoc", ],
["12PCRes", ],
["12PCCom", ],
["13PCRef", ],
["13PCTyp", ],
["13PCSta", ],
["13PCLaL", ],
["13PCLoc", ],
["13PCRes", ],
["13PCCom", ],
["14PCRef", ],
["14PCTyp", ],
["14PCSta", ],
["14PCLaL", ],
["14PCLoc", ],
["14PCRes", ],
["14PCCom", ],
["15PCRef", ],
["15PCTyp", ],
["15PCSta", ],
["15PCLaL", ],
["15PCLoc", ],
["15PCRes", ],
["15PCCom", ],
["16PCRef", ],
["16PCTyp", ],
["16PCSta", ],
["16PCLaL", ],
["16PCLoc", ],
["16PCRes", ],
["16PCCom", ],
["17PCRef", ],
["17PCTyp", ],
["17PCSta", ],
["17PCLaL", ],
["17PCLoc", ],
["17PCRes", ],
["17PCCom", ],
["18PCRef", ],
["18PCTyp", ],
["18PCSta", ],
["18PCLaL", ],
["18PCLoc", ],
["18PCRes", ],
["18PCCom", ],
["19PCRef", ],
["19PCTyp", ],
["19PCSta", ],
["19PCLaL", ],
["19PCLoc", ],
["19PCRes", ],
["19PCCom", ],
["20PCRef", ],
["20PCTyp", ],
["20PCSta", ],
["20PCLaL", ],
["20PCLoc", ],
["20PCRes", ],
["20PCCom", ],
["21PCRef", ],
["21PCTyp", ],
["21PCSta", ],
["21PCLaL", ],
["21PCLoc", ],
["21PCRes", ],
["21PCCom", ],
["22PCRef", ],
["22PCTyp", ],
["22PCSta", ],
["22PCLaL", ],
["22PCLoc", ],
["22PCRes", ],
["22PCCom", ],
["23PCRef", ],
["23PCTyp", ],
["23PCSta", ],
["23PCLaL", ],
["23PCLoc", ],
["23PCRes", ],
["23PCCom", ],
["24PCRef", ],
["24PCTyp", ],
["24PCSta", ],
["24PCLaL", ],
["24PCLoc", ],
["24PCRes", ],
["24PCCom", ],
["25PCRef", ],
["25PCTyp", ],
["25PCSta", ],
["25PCLaL", ],
["25PCLoc", ],
["25PCRes", ],
["25PCCom", ],
["26PCRef", ],
["26PCTyp", ],
["26PCSta", ],
["26PCLaL", ],
["26PCLoc", ],
["26PCRes", ],
["26PCCom", ],
["27PCRef", ],
["27PCTyp", ],
["27PCSta", ],
["27PCLaL", ],
["27PCLoc", ],
["27PCRes", ],
["27PCCom", ],
["28PCRef", ],
["28PCTyp", ],
["28PCSta", ],
["28PCLaL", ],
["28PCLoc", ],
["28PCRes", ],
["28PCCom", ],
["29PCRef", ],
["29PCTyp", ],
["29PCSta", ],
["29PCLaL", ],
["29PCLoc", ],
["29PCRes", ],
["29PCCom", ],
["30PCRef", ],
["30PCTyp", ],
["30PCSta", ],
["30PCLaL", ],
["30PCLoc", ],
["30PCRes", ],
["30PCCom", ],
["31PCRef", ],
["31PCTyp", ],
["31PCSta", ],
["31PCLaL", ],
["31PCLoc", ],
["31PCRes", ],
["31PCCom", ],
["32PCRef", ],
["32PCTyp", ],
["32PCSta", ],
["32PCLaL", ],
["32PCLoc", ],
["32PCRes", ],
["32PCCom", ],
["33PCRef", ],
["33PCTyp", ],
["33PCSta", ],
["33PCLaL", ],
["33PCLoc", ],
["33PCRes", ],
["33PCCom", ],
["34PCRef", ],
["34PCTyp", ],
["34PCSta", ],
["34PCLaL", ],
["34PCLoc", ],
["34PCRes", ],
["34PCCom", ],
["35PCRef", ],
["35PCTyp", ],
["35PCSta", ],
["35PCLaL", ],
["35PCLoc", ],
["35PCRes", ],
["35PCCom", ],
["01SARef", ],
["01SATyp", ],
["01SASta", ],
["01SALaL", ],
["01SALoc", ],
["01SARes", ],
["01SACom", ],
["02SARef", ],
["02SATyp", ],
["02SASta", ],
["02SALaL", ],
["02SALoc", ],
["02SARes", ],
["02SACom", ],
["03SARef", ],
["03SATyp", ],
["03SASta", ],
["03SALaL", ],
["03SALoc", ],
["03SARes", ],
["03SACom", ],
["04SARef", ],
["04SATyp", ],
["04SASta", ],
["04SALaL", ],
["04SALoc", ],
["04SARes", ],
["04SACom", ],
["05SARef", ],
["05SATyp", ],
["05SASta", ],
["05SALaL", ],
["05SALoc", ],
["05SARes", ],
["05SACom", ],
["06SARef", ],
["06SATyp", ],
["06SASta", ],
["06SALaL", ],
["06SALoc", ],
["06SARes", ],
["06SACom", ],
["07SARef", ],
["07SATyp", ],
["07SASta", ],
["07SALaL", ],
["07SALoc", ],
["07SARes", ],
["07SACom", ],
["08SARef", ],
["08SATyp", ],
["08SASta", ],
["08SALaL", ],
["08SALoc", ],
["08SARes", ],
["08SACom", ],
["09SARef", ],
["09SATyp", ],
["09SASta", ],
["09SALaL", ],
["09SALoc", ],
["09SARes", ],
["09SACom", ],
["10SARef", ],
["10SATyp", ],
["10SASta", ],
["10SALaL", ],
["10SALoc", ],
["10SARes", ],
["10SACom", ],
["11SARef", ],
["11SATyp", ],
["11SASta", ],
["11SALaL", ],
["11SALoc", ],
["11SARes", ],
["11SACom", ],
["12SARef", ],
["12SATyp", ],
["12SASta", ],
["12SALaL", ],
["12SALoc", ],
["12SARes", ],
["12SACom", ],
["13SARef", ],
["13SATyp", ],
["13SASta", ],
["13SALaL", ],
["13SALoc", ],
["13SARes", ],
["13SACom", ],
["14SARef", ],
["14SATyp", ],
["14SASta", ],
["14SALaL", ],
["14SALoc", ],
["14SARes", ],
["14SACom", ],
["15SARef", ],
["15SATyp", ],
["15SASta", ],
["15SALaL", ],
["15SALoc", ],
["15SARes", ],
["15SACom", ],
["16SARef", ],
["16SATyp", ],
["16SASta", ],
["16SALaL", ],
["16SALoc", ],
["16SARes", ],
["16SACom", ],
["17SARef", ],
["17SATyp", ],
["17SASta", ],
["17SALaL", ],
["17SALoc", ],
["17SARes", ],
["17SACom", ],
["18SARef", ],
["18SATyp", ],
["18SASta", ],
["18SALaL", ],
["18SALoc", ],
["18SARes", ],
["18SACom", ],
["19SARef", ],
["19SATyp", ],
["19SASta", ],
["19SALaL", ],
["19SALoc", ],
["19SARes", ],
["19SACom", ],
["20SARef", ],
["20SATyp", ],
["20SASta", ],
["20SALaL", ],
["20SALoc", ],
["20SARes", ],
["20SACom", ],
["21SARef", ],
["21SATyp", ],
["21SASta", ],
["21SALaL", ],
["21SALoc", ],
["21SARes", ],
["21SACom", ],
["22SARef", ],
["22SATyp", ],
["22SASta", ],
["22SALaL", ],
["22SALoc", ],
["22SARes", ],
["22SACom", ],
["23SARef", ],
["23SATyp", ],
["23SASta", ],
["23SALaL", ],
["23SALoc", ],
["23SARes", ],
["23SACom", ],
["24SARef", ],
["24SATyp", ],
["24SASta", ],
["24SALaL", ],
["24SALoc", ],
["24SARes", ],
["24SACom", ],
["25SARef", ],
["25SATyp", ],
["25SASta", ],
["25SALaL", ],
["25SALoc", ],
["25SARes", ],
["25SACom", ],
["26SARef", ],
["26SATyp", ],
["26SASta", ],
["26SALaL", ],
["26SALoc", ],
["26SARes", ],
["26SACom", ],
["27SARef", ],
["27SATyp", ],
["27SASta", ],
["27SALaL", ],
["27SALoc", ],
["27SARes", ],
["27SACom", ],
["28SARef", ],
["28SATyp", ],
["28SASta", ],
["28SALaL", ],
["28SALoc", ],
["28SARes", ],
["28SACom", ],
["29SARef", ],
["29SATyp", ],
["29SASta", ],
["29SALaL", ],
["29SALoc", ],
["29SARes", ],
["29SACom", ],
["30SARef", ],
["30SATyp", ],
["30SASta", ],
["30SALaL", ],
["30SALoc", ],
["30SARes", ],
["30SACom", ],
["31SARef", ],
["31SATyp", ],
["31SASta", ],
["31SALaL", ],
["31SALoc", ],
["31SARes", ],
["31SACom", ],
["32SARef", ],
["32SATyp", ],
["32SASta", ],
["32SALaL", ],
["32SALoc", ],
["32SARes", ],
["32SACom", ],
["33SARef", ],
["33SATyp", ],
["33SASta", ],
["33SALaL", ],
["33SALoc", ],
["33SARes", ],
["33SACom", ],
["34SARef", ],
["34SATyp", ],
["34SASta", ],
["34SALaL", ],
["34SALoc", ],
["34SARes", ],
["34SACom", ],
["35SARef", ],
["35SATyp", ],
["35SASta", ],
["35SALaL", ],
["35SALoc", ],
["35SARes", ],
["35SACom", ],
["Area-E", ],
["Area-D", ],
["Po-WW-E", ],
["Po-WW-D", ],
["Po-Cy-E", ],
["Po-Cy-D", ],
["Cr-WW-E", ],
["Cr-WW-D", ],
["Cr-Cy-E", ],
["Cr-Cy-D", ],
["Pe-WW-D", ],
["Pe-WW-E", ],
["Pe-Cy-D", ],
["Pe-Cy-E", ],
["MD-WW-D", ],
["MD-WW-E", ],
["MD-Cy-D", ],
["MD-Cy-E", ],
["MT-E", ],
["MT-D", ],
["PT-E", ],
["PT-D", ],
["GI-E", ],
["GI-D", ],
["IT-E", ],
["IT-D", ],
["EP-E", ],
["EP-D", ],
["TM-Comments", ],
["AC-Comments", ],
]
*/
